require('./styles.scss');
var _data = require('./data');
var _utils = require('./utils');
const PADDING = 40;
const WIDTH = 600;
const HEIGHT = 200;
const DPI_WIDTH = WIDTH * 2;
const DPI_HEIGHT = HEIGHT * 2;
const VIEW_HEIGHT = DPI_HEIGHT - PADDING * 2;
const VIEW_WIDTH = DPI_WIDTH;
const toChart = chart(document.getElementById("chart"), _data.getChartData());
toChart.init();
function chart(canvas, data) {
  let raf;
  const ctx = canvas.getContext("2d");
  canvas.style.width = WIDTH + 'px';
  canvas.style.height = HEIGHT + 'px';
  canvas.width = DPI_WIDTH;
  canvas.height = DPI_HEIGHT;
  canvas.addEventListener("mousemove", mousemove);
  canvas.addEventListener("mouseleave", mouseleave);
  function mouseleave() {
    proxy.mouse = null;
  }
  const proxy = new Proxy({}, {
    set(...args) {
      const result = Reflect.set(...args);
      raf = requestAnimationFrame(paint);
      return result;
    }
  });
  function mousemove({clientX}) {
    const {left} = canvas.getBoundingClientRect();
    proxy.mouse = {
      x: (clientX - left) * 2
    };
  }
  function clear() {
    ctx.clearRect(0, 0, DPI_WIDTH, DPI_HEIGHT);
  }
  function paint() {
    clear();
    const [yMin, yMax] = computeBounderies(data);
    const xRatio = VIEW_WIDTH / (data.columns[0].length - 2);
    const yRatio = VIEW_HEIGHT / (yMax - yMin);
    xData = data.columns.filter(col => data.types[col[0]] !== 'line')[0];
    yData = data.columns.filter(col => data.types[col[0]] === 'line');
    // Painting
    _utils.yAxis(ctx, yMin, yMax);
    _utils.xAxis(ctx, xData, xRatio, proxy);
    yData.map(toCoords(xRatio, yRatio)).forEach((coords, indx) => {
      const name = yData[indx][0];
      const color = data.colors[name];
      _utils.line(ctx, coords, {
        color
      });
      for (const [x, y] of coords) {
        if (_utils.isOver(proxy.mouse, x, coords.length)) {
          _utils.circle(ctx, [x, y], color);
          break;
        }
      }
    });
  }
  return {
    init() {
      paint();
    },
    destroy() {
      cancelAnimationFrame(raf);
      canvas.removeEventListener("mousemove", mousemove);
      canvas.removeEventListener("mouseleave", mouseleave);
    }
  };
}
